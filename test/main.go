package main

import (
	"encoding/base64"
	"fmt"
)

const v = `YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNMmFrTkRRV1JMWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplazFFVlhkT1ZFRXpUWHBGZVUxc2IxaEVWRTE2VFVSVmQwMXFRVE5OZWxsNVRXeHZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVFhFNENpdG9hR3cxVDFWYVVXeHFhVzgyVERrdk9HRTNjM2hxVTJSU1lXd3dlSGRDT1dOVVMycFRVM2xCVkhkdGJuVXdabTFOYUVsa2EzbFJVRXQyWlVab2Vrc0tiM3B6VVROSE1uRnhhR0p1TldncmFDdHJhemxrWWxCTGFFNXBOMWgyT0VoRVRYQXhNVFZDZUhoWVpuZEhSekoxVVc1UmQzZFZPRGt2T0VKU1ZsWTBiQXBQWWxVdmRHdHZORGxDWkZoRk0yNVdlRVZVZVVWMlJUTk1PVFJ3ZDJ0U1lWUmxLMjVvZVZWM1JIVjFXR1pTTm5adFVERm5MMDlWYUhJdmQwaGFaVGhSQ25Rck1URlpUa2RSZVdGS1ExSmlZV3BVUWpZdlFsRlllVzVPZW1KT2JIUnpZbkFyV1VaQmJ6RkZlbWxoWVhSM2VtMUdlbmxTVDBwdllUWlhTWEJUTVdvS0syZHFXWEExUjNSNFIxZFFTR2RJVjFGT2JGZDFSVmhHVVVsVk1tOTBWVzFYZDIxVGJrcFhURXRJVDNad2IzcHVXSFZXVG00d1dYRjFZalYyWkdZMlJRcERaVkZOY2xaUVMxcGlWRFZFVDNKMWRrc3dRMEYzUlVGQllVNUdUVVZOZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVSkpSMEV4VldSRmQwVkNDaTkzVVVsTlFWbENRV1k0UTBGUlFYZElVVmxFVmxJd1QwSkNXVVZHUXl0Wk1XdEtNbUo1WWxGSlRHeHRNbUY2YTNsNk1WRXllVlpsVFVFd1IwTlRjVWNLVTBsaU0wUlJSVUpEZDFWQlFUUkpRa0ZSUTFSTFVrbElaR05vUVdWM2MwYzBiRzkwTjI5T1lYUlpTakJLYlhoa1pHdGtaRXNyUmpFNU9USjRjM1ZrZWdwU2NHRnFaM3BGWVVadFN6aE1ObFpPTWpGeVZXTkhhRXRyYjJ0VmJ6SlVZelZhTjFSMVFXOVZTV3h2UzA5SFIzTnpjbWxEVWxwc05GQm9ZbkJFV0ZsekNteElTRGxCUW1GR0wxZHlVVXBCZFdkWU9XZExiWEI0WXpKaE9IcHViMUV3WkRaNlpXWk5TVnBZZEdKc1VERlJZVVZHYVZkeVZ6RTVhVEZXWjFSV1NqY0tTMnhWTkd0SlZtMVROa3hYWTJaUmFVTnJiVU5hWTNNeGFscHBjMll2V0hrdkwyOTNiVXRVYzFkRE1WWklkalozTVc0eVVXOUJiRFJvUkRKbVpGY3dUd3AzVUhOTVMwMVpRakF5VUZOSk1rdGhNakpsU2xCVVJteGxWMUZNV0U5dkwwWldVV1ZQVEVGNE9UaEpkM2hJVW5Ga01HaEdkRUptVldsWldTOTJjbkpvQ2t4UlIxaFFTbTU2SzNKWFIyaDFPQzlsTWxaTVdUUnpiSHBNZDFFMFEwdHBjRzlNUTNRMkt6Z0tMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICAgIHNlcnZlcjogaHR0cHM6Ly8xNzIuMTguMC4zOjY0NDMKICBuYW1lOiB3b3JrbG9hZApjb250ZXh0czoKLSBjb250ZXh0OgogICAgY2x1c3Rlcjogd29ya2xvYWQKICAgIHVzZXI6IHdvcmtsb2FkLWFkbWluCiAgbmFtZTogd29ya2xvYWQtYWRtaW5Ad29ya2xvYWQKY3VycmVudC1jb250ZXh0OiB3b3JrbG9hZC1hZG1pbkB3b3JrbG9hZApraW5kOiBDb25maWcKcHJlZmVyZW5jZXM6IHt9CnVzZXJzOgotIG5hbWU6IHdvcmtsb2FkLWFkbWluCiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSRmVrTkRRV1oxWjBGM1NVSkJaMGxKVjFJM1FWSjRRVmRoVGxWM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZEdWRVZVVFVKRlIwRXhWVVVLUVhoTlMyRXpWbWxhV0VwMVdsaFNiR042UVdWR2R6QjVUWHBCTVUxRVZYZE9lazE0VFdwS1lVWjNNSGxPUkVFeFRVUlJkMDU2VFRKTmFrcGhUVVJSZUFwR2VrRldRbWRPVmtKQmIxUkViazQxWXpOU2JHSlVjSFJaV0U0d1dsaEtlazFTYTNkR2QxbEVWbEZSUkVWNFFuSmtWMHBzWTIwMWJHUkhWbnBNVjBackNtSlhiSFZOU1VsQ1NXcEJUa0puYTNGb2EybEhPWGN3UWtGUlJVWkJRVTlEUVZFNFFVMUpTVUpEWjB0RFFWRkZRVE0xUmt0QlozQmpjMDVuTkhSMlNXWUtXVmcwVkZObFdsSnBlazFoUkRjeWRGaGtXbk55TmxnNFJrOUhia1ZRWVRONmJXSTRkMGxpYWpKTVNFOUlabE5pZDAxMmVHSmxUMGxUVjBoTWVFTXphZ3BNTWl0M1FWcElOREJNVFV4bVRsY3lZbmhpV0cxbE5XbElkbUo1VlZCVlJHUldkR3QzYXpodVUzVTRZVkJwU0ZCcVNsZENObU56Y3psckwxZFdhMEZRQ2psdGVWRTJNWFIyU0ZCNlMzVkpiMWxXYVZwRlpVOVFUWEpXVlZGbldIUnJZMGR1VnpsMFNsaENiMkl4ZGtvM2JtWm1TMnhPVms5WVZETjZkVU14YVRZS1lrVmFlbTlFVjJ0WlJsTXdUekozZVcxaVlVTk1WRTFXZFhsNlpXTXJWbEpPTWk5a1NGQXJjMmt4TUdadFYzazJkVVJFZWpsM2VYbE1ObW8yVldJeGRncHFORFI1TTJWcVZITlFNek5vVnpBMk9HRkxLelZaWXpKbFQxbEJhMVJPTDB3MGN5OUJVbkZoTWtsSFRHeDFNMDVqV1hkR2VsTmFVa3d3VVVkSE5qTmhDa05FZGsxTGQwbEVRVkZCUW04d1ozZFNha0ZQUW1kT1ZraFJPRUpCWmpoRlFrRk5RMEpoUVhkRmQxbEVWbEl3YkVKQmQzZERaMWxKUzNkWlFrSlJWVWdLUVhkSmQwaDNXVVJXVWpCcVFrSm5kMFp2UVZWTU5XcFhVVzVhZGtwMFFXZDFWMkphY2s5VVRGQldSR0pLVmpSM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEFwQ1VVRkVaMmRGUWtGQ1pHRjRTM2xPT0d0SlMzQjBja0ptYjJ0eWMxVlpUVGcwY1VVMU9VeEtVWGcyYVc1YUx5OUJTbmgwWVZkdFZrazFTMU5IUVhoTUNqYzRaREZvVVRRMFRDOTRSVmRMZW10dFMxRkxkMlZaZEdabGFUY3lUa2w1WkV0eFpITk5hbGx0ZDAxQmJ6TnBTbnBZYmxWemMyZDJORGMxZG05SVR6Y0tSSFkwU2lzM2JWVTFOSFpwVEROVlpWUkxORFZOYVhNck1GaFlPVFZQYWpJMGIwOVNPRFUxV2pjelVVcEJVMDAxTTNoS04xRTNRMXBpUTI5Uk1XWnJiUXBQWXpOU01VMUJNVmh1VmtKSllsTmthVEJJUVRGYVZ5dDFPVXRpTnpFNFYzUkRRazUyVEVONFZucHFPVmxETUVKdlowMU5URE5vV2tzd1pteGFUak5zQ2pOQ1EzSkNVamxoYTB0SFMxSTFaMFIxZWpSVk1FOVhhMnBaWjFOeE9FSmlXblV6TWk5MGNVRXljRU5PZUc1NFpYVnpkRFJNYzA1RlFrdEVlbU54Ym1RS09VaDJOakF3V1hac1oySlpLMlJZTjFKSVYycDZORWhhWVRsblZVaFVVVDBLTFMwdExTMUZUa1FnUTBWU1ZFbEdTVU5CVkVVdExTMHRMUW89CiAgICBjbGllbnQta2V5LWRhdGE6IExTMHRMUzFDUlVkSlRpQlNVMEVnVUZKSlZrRlVSU0JMUlZrdExTMHRMUXBOU1VsRmIzZEpRa0ZCUzBOQlVVVkJNelZHUzBGbmNHTnpUbWMwZEhaSlpsbFlORlJUWlZwU2FYcE5ZVVEzTW5SWVpGcHpjalpZT0VaUFIyNUZVR0V6Q25wdFlqaDNTV0pxTWt4SVQwaG1VMkozVFhaNFltVlBTVk5YU0V4NFF6TnFURElyZDBGYVNEUXdURTFNWms1WE1tSjRZbGh0WlRWcFNIWmllVlZRVlVRS1pGWjBhM2RyT0c1VGRUaGhVR2xJVUdwS1YwSTJZM056T1dzdlYxWnJRVkE1YlhsUk5qRjBka2hRZWt0MVNXOVpWbWxhUldWUFVFMXlWbFZSWjFoMGF3cGpSMjVYT1hSS1dFSnZZakYyU2pkdVptWkxiRTVXVDFoVU0zcDFRekZwTm1KRlducHZSRmRyV1VaVE1FOHlkM2x0WW1GRFRGUk5WblY1ZW1WaksxWlNDazR5TDJSSVVDdHphVEV3Wm0xWGVUWjFSRVI2T1hkNWVVdzJhalpWWWpGMmFqUTBlVE5sYWxSelVETXphRmN3TmpoaFN5czFXV015WlU5WlFXdFVUaThLVERSekwwRlNjV0V5U1VkTWJIVXpUbU5aZDBaNlUxcFNUREJSUjBjMk0yRkRSSFpOUzNkSlJFRlJRVUpCYjBsQ1FVWnRVbE0yVld4dldubzBRVEJFU1FwSUszQm1TMFJ6YWtkMVp6VjNUMk4wYUhCa2FHOUpiQ3RhYXlzelZqaGthMFZLSzFGbmVFcGxLMFZ0U1dOd2RIUjBSR2sxWmtSQllWTkRLMlZFY0ZNMkNrUmFjV3BzUmtGTmRYcEthR2xQYVhGa2FuaHlWMnhXUWs4ck5VdzBVMmwxUVVsVGVqWk9iM1lyTHpNMVlsQnZXR05hT1ZKQ2IzTjZObllyUkZoTmRWSUtVSFJRY2tOMVVTODNXRkZtYTNSbU55c3lVVWxWVFZwa0wxWkplbFZwUTFvd2FDODVjVVptVDJ3clZYRlRVSFY2YmpnMlNUWmlaVTFXVVRobVVGbzFOd28zVDBWeFpuVnNkM1kxTlVad2NHNWhkMHBOTVhWaU1tUkZOWFF6ZEU0d2RGUnhNVTlYVDJjM1pDdDNaV1JWYW5samFVTjZjVXdyYVZoNFUzUTRhbUZZQ2tneVNFRkpSbE5wZDFSUlMyUnlRbnBsYzNGUlpUaGxZbXhLYjJkRlFXeERVVmxvWkRWVU5IYzNaamc0V2pCU1REWTBjalU0U0U5VGJDOXViME5PYWtnS1J5OUdZVXhSUlVObldVVkJMekZIU2l0Uk9HZzJUbmw2VWs1S1kzYzVXQzlYWlVWRk1sSTBTVXRvVVV4cmJHTm1aVzVrZDJ4aVpuWnBURXd5UW1ReFVRcHRMMkV3Unk5b2RqSlhlVUZzT1Zkd1JqUnZkREZuT1VaME9HSjRiSFppTUhSQlUxRkJWalZyVlhoR1RtUnBXblZzWmpKQ1EzRk1ZM1pYTUZOdVdqZHdDbEZIUzFka1IzWXpkVnBTZUhOblRYTlRVWG92WW0xSVNuWnJlV1pWU0c1MWFqTldlWFJ3VWpWWldIQk1aV1V5VHpnM2FtOVViV3REWjFsRlFUUkRiMDRLT0ZCd05sQk9ValpDWmlzMlJFSmpSVmdyU1dJMVRIZG9Wbk12Y1ZOeWFsQm9iamw2U0dSU00wRlRjVmR2TTFCSVduTlBUbUpXYlVSUmVqVXJhMFozVWdweVZrODVNVlJ0Ums5ak1XNDNjR0ZLYVN0WGJVdE9jR2d6ZG1wTFRtWmxPR1JvZUVkUE9XTnpPR3hIU1hCNWRsZGFVR2t4VEdkRWJVZDVNMmt3UlVsSkNsZHlSV3BWVVhwek5YRTVXakJyV0ZkeWREQkJVRTVhWkZGNlVFMHZkakY1ZVVjMVVHMHpUVU5uV1VGbE5rMUpjRlZ5YlhGT1ZETkhjMU5xYkRGSWVISUtXbmxDZEVsSlQyZG9TR2syUzBzek5EVTBha3gwTURkaFdEaEJSa05pZGl0b1lXeGpWVmxHU1RoNVprZFBaVzFWYm1abVlXMUdTelpaZFRGUlpESnJPQXBsWldwMFNWZzFTSGxEY0RKcFZWTlBRaTlwWkZSM1dXMU5TbEV5V0UxNWEweE5kRWRKVDFGSGNGZ3ZNa3QzWjNKa09WWmphVm8wWnpKaGJsZ3hhM05hQ2s1M1JFTk9ZM1JWUkRkblptUk1SQzkwU0hvM1RWRkxRbWRHTldKR1ZtTjZPVGRSV0Uwck0wZG5UV1ZMUVV4MGFtSTFOVTlYYWtsNVptdHdTbXhKUkcwS2MwMTNSRzVNZDA4NGVUSkhSa2szTjBSV1RGUTVUalptVG1GTlMxQm9ObHBQZWxNdllUUmhla2xYV21GVmVtUm9lVkpyTVVsNlJUVjNPVkZJYmxoeFVnb3lSRnByUlc1V1JsRkxTWFJZTm1STk1FOWhNbFpwVm0xdlUzaE5VSHAyT1dsQlNXSXdURkZvV2pCMVRsQm9jVWw1UVhKVWNVcHZZU3RrVkhwV2FHUnlDalV6U214QmIwZENRVTV2U0ROUVUzYzNVbmh5TTNsVVUwNUZUemt2VWpNMlpHNVBaVm92VERGU04xUXhPVVp5U0RkNk4yMXBjVGxTUmt4Qk0yd3pZWElLTUROc1NFcHhiakkzUkZwWWRISlZiVVJpVUZCamFGVXZXVGQzZUdGdlYydGtOMEpFTlc1Qk9VSTRaMmxxVVRkbk5FdFlkblJYUjJGRVlXaHFiRkF3ZUFwVlptUXhNbVJzWkRnMk1qTXlPVFZUTkROamNEbDZia0ZyVnpCR1IyTjRjRFZ5UlVRMFVUSjJiV2wxVjBWdGVXdDVTbVpxQ2kwdExTMHRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzB0TFMwdENnPT0K`

func main() {
	//newv := strings.TrimSpace(v)
	//fmt.Println(string(v[0]))
	//fmt.Println(string(v[len(v)-1]))
	b, err := base64.StdEncoding.DecodeString(v)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(b))
}
